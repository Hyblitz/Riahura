<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-800110</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ShowInv = false;

randomize();
Character = choose("Rama","Riahura");
alarm[0] = 1;
scrTimeSetup();
num = 0;

if room = rmGame
{
    //instance_create(0,0,oFallOff);
}
if !audio_is_playing(snd_idk)
{
    audio_play_sound(snd_idk,1,true);
}
ScreenShake = false;
Sname = -1
emitter1 = -1
boi = 0;
angle = round(random(360));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///placeholder
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 1;
scrTimeUpdate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("I"))
{
    ShowInv = -ShowInv;
}

if !instance_exists(oMBSpiritEater) &amp;&amp; !instance_exists(oMBSpikeBall) &amp;&amp; ScreenShake = false
{
    instance_create(x,y,oScreenShake);
    ScreenShake = true;
}

if alarm[10] != -1
{
    if oRama.Element = 0
    {
        Sname = part_system_create();
        part_system_depth(Sname,depth);
        particle1 = part_type_create();
        part_type_shape(particle1,pt_shape_smoke);
        part_type_size(particle1,0.20,0.20,0,0);
        part_type_scale(particle1,1,1);
        part_type_color3(particle1,16777215,16777088,16777215);
        part_type_alpha3(particle1,1,1,1);
        part_type_speed(particle1,1,1,0,0);
        part_type_direction(particle1,45,135,0,0);
        part_type_gravity(particle1,0.10,90);
        part_type_orientation(particle1,0,20,2,0,1);
        part_type_blend(particle1,0);
        part_type_life(particle1,15,50);
        emitter1 = part_emitter_create(Sname);
        part_emitter_region(Sname,emitter1,oRama.x,oRama.x,oRama.y,oRama.y,ps_shape_ellipse,1);
        part_emitter_burst(Sname,emitter1,particle1,1);
    }
    if oRama.Element = 1
    {
        Sname = part_system_create();
        part_system_depth(Sname,depth);
        particle1 = part_type_create();
        part_type_shape(particle1,pt_shape_smoke);
        part_type_size(particle1,0.20,0.20,0,0);
        part_type_scale(particle1,1,1);
        part_type_color3(particle1,16744448,12615680,10485760);
        part_type_alpha3(particle1,1,1,1);
        part_type_speed(particle1,1,1,0,0);
        part_type_direction(particle1,45,135,0,0);
        part_type_gravity(particle1,0.10,90);
        part_type_orientation(particle1,0,20,2,0,1);
        part_type_blend(particle1,0);
        part_type_life(particle1,15,50);
        emitter1 = part_emitter_create(Sname);
        part_emitter_region(Sname,emitter1,oRama.x,oRama.x,oRama.y,oRama.y,ps_shape_ellipse,1);
        part_emitter_burst(Sname,emitter1,particle1,1);
    
    }
    if oRama.Element = 2
    {
        Sname = part_system_create();
        part_system_depth(Sname,depth);
        particle1 = part_type_create();
        part_type_shape(particle1,pt_shape_smoke);
        part_type_size(particle1,0.20,0.20,0,0);
        part_type_scale(particle1,1,1);
        part_type_color3(particle1,16777215,8454016,16777215);
        part_type_alpha3(particle1,1,1,1);
        part_type_speed(particle1,1,1,0,0);
        part_type_direction(particle1,45,135,0,0);
        part_type_gravity(particle1,0.10,90);
        part_type_orientation(particle1,0,20,2,0,1);
        part_type_blend(particle1,0);
        part_type_life(particle1,15,50);
        emitter1 = part_emitter_create(Sname);
        part_emitter_region(Sname,emitter1,oRama.x,oRama.x,oRama.y,oRama.y,ps_shape_ellipse,1);
        part_emitter_burst(Sname,emitter1,particle1,1);
    }
}
if alarm[10] = 0
{
    part_system_destroy(Sname);
    part_emitter_destroy(Sname,emitter1);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing GUI

if instance_exists(oRama)
{
    MaxEnergy = oRama.MaxEnergy;
    MaxHealth = oRama.MaxHealth;
    Health = oRama.Health;
    Energy = oRama.Energy;
}
if !instance_exists(oRoomTransition)
{
    draw_sprite(sGUI,0,0,0);
    
    draw_sprite_part(sGUIHealthBar,0,0,0,(Health/MaxHealth)*sprite_get_width(sGUIHealthBar),sprite_get_height(sGUIHealthBar),74,30);
    
    
    draw_sprite_part(sGUIStaminaBar,0,0,0,(Energy/MaxEnergy)*sprite_get_width(sGUIStaminaBar),sprite_get_height(sGUIStaminaBar),84,57);
    
    for(i = 0; i &lt; oRama.Shards; i ++)
    {
        draw_sprite(sGUIShards,0,89+57*i,82)
    }
}


draw_set_alpha(1);
if instance_exists(oBoss)
{
    if oBoss.sprite_index = sBossDashAttack &amp;&amp; oBoss.image_index &gt;= 2 &amp;&amp; oBoss.image_index &lt;= 3 &amp;&amp; oBoss.alarm[9] != -1
    {
        draw_rectangle_colour(0,0,view_wview*2,view_hview*2,c_black,c_black,c_black,c_black,false);
        boi += .5;
        draw_sprite_ext(sBossSlash,boi,oRama.x-view_xview,oRama.y-view_yview,1,1,angle,c_white,1)//**/);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_is_playing(sndBossMusic) &amp;&amp; instance_exists(oBoss)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    //draw_text(view_xview+view_wview/2,view_yview+view_hview-sprite_get_height(sBossGUI)*2,"Tahot")
    draw_sprite(sBossTitle,0,view_xview+view_wview/2,view_yview + view_hview-sprite_get_height(sBossGUI)/2 - sprite_get_height(sBossTitle)/2 );
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_sprite(sBossGUI,0,view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI)/2);
    draw_sprite_part(sBossGUI,1,0,0,(oBoss.HP/oBoss.MaxHealth)*sprite_get_width(sBossGUI),sprite_get_height(sBossGUI),view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI));

}

if instance_exists(oMBSpiritEater)
{
    if point_distance(oRama.x,oRama.y,oMBSpiritEater.x,oMBSpiritEater.y) &lt; 900
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_bottom);
        //draw_text(view_xview+view_wview/2,view_yview+view_hview-sprite_get_height(sBossGUI)*2,"Tahot")
        //draw_sprite(sBossTitle,0,view_xview+view_wview/2,view_yview + view_hview-sprite_get_height(sBossGUI)/2 - sprite_get_height(sBossTitle)/2 );
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        draw_sprite(sBossGUI,0,view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI)/2);
        draw_sprite_part(sBossGUI,1,0,0,(oMBSpiritEater.Health/oMBSpiritEater.MaxHealth)*sprite_get_width(sBossGUI),sprite_get_height(sBossGUI),view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI));
    }
}

if instance_exists(oMBSpikeBall)
{
    if point_distance(oRama.x,oRama.y,oMBSpikeBall.x,oMBSpikeBall.y) &lt; 900
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_bottom);
        //draw_text(view_xview+view_wview/2,view_yview+view_hview-sprite_get_height(sBossGUI)*2,"Tahot")
        //draw_sprite(sBossTitle,0,view_xview+view_wview/2,view_yview + view_hview-sprite_get_height(sBossGUI)/2 - sprite_get_height(sBossTitle)/2 );
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        draw_sprite(sBossGUI,0,view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI)/2);
        draw_sprite_part(sBossGUI,1,0,0,(oMBSpikeBall.Health/oMBSpikeBall.MaxHealth)*sprite_get_width(sBossGUI),sprite_get_height(sBossGUI),view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if !instance_exists(cont_pause)
{
    if keyboard_check_pressed(vk_space)
    {
        instance_create(0,0,cont_pause);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
