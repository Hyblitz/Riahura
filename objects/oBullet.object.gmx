<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

alarm[0] = 1;
image_speed = 0;

ViewReturnX = view_wview;
ViewReturnY = view_hview;

Damage = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IceBlast

if Type = 5
{
    view_wview = ViewReturnX;
    view_hview = ViewReturnY;
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Type = 2
{
    audio_play_sound(sndWind,1,false);
}
else
{
    audio_play_sound(snd_water,1,false);
}

/*PathCresent = path_add();

image_index = (Type-1);

if Type = 1
{
    audio_play_sound(snd_water,0,false);

    StartX = x;
    StartY = y;

    path_clear_points(PathCresent);
    
    path_insert_point(PathCresent,0, x,y, 500);
    
    path_insert_point(PathCresent,1,
    x + lengthdir_x(point_distance(x,y,mouse_x,mouse_y)/2,point_direction(x,y,mouse_x,mouse_y))
    /*+ sin(point_direction(x,y,mouse_x,mouse_y)*pi/180)*300*/
    /*,
    y + lengthdir_y(point_distance(x,y,mouse_x,mouse_y)/2,point_direction(x,y,mouse_x,mouse_y))
    - cos(point_direction(x,y,mouse_x,mouse_y)*pi/180)*300
    , 100);
    
    path_insert_point(PathCresent,2, mouse_x,mouse_y, 100);
    
    path_set_kind(PathCresent, 1);
    path_set_precision(PathCresent,6);
    path_set_closed(PathCresent, false); 
    path_start(PathCresent,24,path_action_stop,true);  
    
    
    
    
    
    /// EXECUTE ONCE, create event works well, but an if-statement works too.
    path = PathCresent;
    //mp_grid_path(path, ... ); // assumed path points to the goal
    points = path_get_number(path); // get the number of nodes of that path
    point = 0;// path to the first node first... firstly.
    mag = 10000;
    done = false; 
}

if Type = 7
{
    image_xscale = .25;
    image_yscale = .25; 
    a = physics_fixture_create();
    physics_fixture_set_box_shape(a,sprite_width/2,sprite_height/2);
    physics_fixture_bind(a, id);
    physics_fixture_delete(a);  
}

if Type = 5
{
    snd = audio_create_stream(working_directory + "\Screens\SFXSkill12.ogg");
    audio_play_sound(snd, 10, false);
    audio_sound_pitch(snd,1.5);
    image_index =0;
    visible = true;
    image_speed = oRama.image_speed; 
    a = physics_fixture_create();
    physics_fixture_set_circle_shape(a,100);
    physics_fixture_bind(a, id);
    physics_fixture_delete(a);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Type = 1
{
    sprite_index = sBullet;
    image_index = 1;
    Sname = part_system_create();
    particle1 = part_type_create();
    part_type_shape(particle1,pt_shape_cloud);
    part_type_size(particle1,1,1,0,0);
    part_type_scale(particle1,0.60,0.60);
    part_type_color3(particle1,16777088,16744448,16688641);
    part_type_alpha1(particle1,1);
    part_type_speed(particle1,1,1,0,0);
    part_type_direction(particle1,0,359,-10,0);
    part_type_orientation(particle1,0,0,-20,0,0);
    part_type_blend(particle1,0);
    part_type_life(particle1,0,21);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle1,5);
    particle2 = part_type_create();
    part_type_shape(particle2,pt_shape_ring);
    part_type_size(particle2,1,1,0,0.50);
    part_type_scale(particle2,0.20,0.20);
    part_type_color3(particle2,16777215,16777088,16744448);
    part_type_alpha1(particle2,1);
    part_type_speed(particle2,1,1,0,0);
    part_type_direction(particle2,0,359,-10,0);
    part_type_gravity(particle2,0,270);
    part_type_orientation(particle2,0,200,-20,0,1);
    part_type_blend(particle2,0);
    part_type_life(particle2,0,10);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle2,5);
    particle3 = part_type_create();
    part_type_shape(particle3,pt_shape_sphere);
    part_type_size(particle3,1,1,0,0);
    part_type_scale(particle3,0.30,0.30);
    part_type_color2(particle3,16744448,16764573);
    part_type_alpha1(particle3,1);
    part_type_speed(particle3,1,1,0,0);
    part_type_direction(particle3,0,359,-10,0);
    part_type_gravity(particle3,0,270);
    part_type_orientation(particle3,0,0,-20,0,1);
    part_type_blend(particle3,1);
    part_type_life(particle3,0,20);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle3,5);
    
    
    if distance_to_object(oRama) &lt; 200
    {
    phy_position_x += lengthdir_x(Speed*2,Direction);
    phy_position_y += lengthdir_y(Speed*2,Direction);
    }
    else
    {
        instance_destroy();
    }
    
    
    
    
}
if Type = 2
{
    sprite_index = sTornado;
    image_speed = .5;
    Sname = part_system_create();
    particle1 = part_type_create();
    part_type_shape(particle1,pt_shape_circle);
    part_type_size(particle1,1,1,0,1);
    part_type_scale(particle1,0.30,0.30);
    part_type_color2(particle1,16777215,8453888);
    part_type_alpha1(particle1,1);
    part_type_speed(particle1,1,1,0,1);
    part_type_direction(particle1,0,359,2,1);
    part_type_gravity(particle1,0,270);
    part_type_orientation(particle1,0,20,0,1,1);
    part_type_blend(particle1,1);
    part_type_life(particle1,0,20);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle1,5);
    particle2 = part_type_create();
    part_type_shape(particle2,pt_shape_flare);
    part_type_size(particle2,1,1,0.10,0);
    part_type_scale(particle2,0.20,0.20);
    part_type_color3(particle2,16777215,8453888,8454016);
    part_type_alpha1(particle2,1);
    part_type_speed(particle2,1,1,0,0);
    part_type_direction(particle2,0,359,0,0);
    part_type_gravity(particle2,0,270);
    part_type_orientation(particle2,0,0,0,0,1);
    part_type_blend(particle2,1);
    part_type_life(particle2,0,13);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle2,5);
    
    if distance_to_object(oRama) &lt; 200
    {
        phy_position_x += lengthdir_x(Speed*2,Direction);
        phy_position_y += lengthdir_y(Speed*2,Direction);
    }
    else
    {
        instance_destroy();
    }
}

/*
if Type != 5
{
    if Type = 7
    {
        image_index = 0;
    }
    if Type = 4
    {
        image_index = 1;
    }
    if Type = 1
    {
        image_index = 2;
    }
    depth = oRama.depth - 100;
}
else
{
    //image_index = 0;
    sprite_index = sIceBlast;
}

if distance_to_object(oRama) &gt; view_wview
{
    instance_destroy();
}


if Type = 1
{

    if distance_to_object(oRama) &lt; 75
    {
    phy_position_x += lengthdir_x(Speed*2,Direction);
    phy_position_y += lengthdir_y(Speed*2,Direction);
    
    Sname = part_system_create();
    particle1 = part_type_create();
    part_type_shape(particle1,pt_shape_disk);
    part_system_depth(Sname,depth+1);
    part_type_size(particle1,0.10,0.10,0,0);
    part_type_scale(particle1,1,1);
    part_type_color1(particle1,16744448);
    part_type_alpha1(particle1,1);
    part_type_speed(particle1,1,1,0,0);
    part_type_direction(particle1,0,359,0,0);
    part_type_gravity(particle1,0.20,-phy_rotation-180);
    part_type_orientation(particle1,0,0,0,0,1);
    part_type_blend(particle1,1);
    part_type_life(particle1,6,15);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,1);
    part_emitter_burst(Sname,emitter1,particle1,2);
    }
    else
    {
        instance_destroy();
    }

    
    
}

if Type = 7
{
    if image_xscale &lt;= 2
    {
        image_xscale += .05;
        image_yscale += .05;
    }
    phy_rotation += 30;
    
    phy_position_x += lengthdir_x(Speed*2,Direction);
    phy_position_y += lengthdir_y(Speed*2,Direction);
    
    if distance_to_object(oRama) &lt; 128
    {
        Sname = part_system_create();
        particle1 = part_type_create();
        part_system_depth(Sname,depth+1);
        part_type_shape(particle1,pt_shape_cloud);
        part_type_size(particle1,0.10,0.10,0,0);
        part_type_scale(particle1,1,1);
        part_type_color2(particle1,8454016,8421440);
        part_type_alpha1(particle1,1);
        part_type_speed(particle1,1,1,0,0);
        part_type_direction(particle1,0,359,0,0);
        part_type_gravity(particle1,0.20,-phy_rotation-180);
        part_type_orientation(particle1,0,0,0,0,1);
        part_type_blend(particle1,1);
        part_type_life(particle1,6,15);
        emitter1 = part_emitter_create(Sname);
        part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,1);
        part_emitter_burst(Sname,emitter1,particle1,15);
    }
    else
    {
        instance_destroy();
    }

}
if Type = 5
{
    view_wview -= 1.77777777*5/1.5;
    view_hview -= 1*5/1.5;
    if oRama.image_index = 22
    {
        alarm[1] = 1;
    } 
    


}
else
{
    depth = -phy_position_y
}
if Type = 4
{

     phy_position_x += lengthdir_x(Speed*2,Direction);
    phy_position_y += lengthdir_y(Speed*2,Direction);
    
    Sname = part_system_create();
    particle1 = part_type_create();
    part_system_depth(Sname,depth-1);
    part_type_sprite(particle1,sIceSpike,0,0,0);
    part_type_size(particle1,.25,.25,0,1);
    part_type_scale(particle1,0.4,0.4);
    part_type_color3(particle1,16777215,16777215,14671616);
    part_type_alpha1(particle1,1);
    part_type_speed(particle1,1,1,0,1);
    part_type_direction(particle1,0,359,0,1);
    part_type_gravity(particle1,0,270);
    part_type_orientation(particle1,0,0,0,2,1);
    part_type_blend(particle1,0);
    part_type_life(particle1,1,21);
    
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,0,0);
    part_emitter_burst(Sname,emitter1,particle1,5);
    
    Sname2 = part_system_create();
    particle2 = part_type_create();
    part_system_depth(Sname2,depth-1);
    part_type_sprite(particle2,sIceSpike,0,0,0);
    part_type_size(particle2,.25,.25,0,0);
    part_type_scale(particle2,.5,.5);
    part_type_alpha1(particle2,1);
    part_type_speed(particle2,0,3,0,0);
    part_type_direction(particle2,0,359,0,0);
    part_type_gravity(particle2,0,270);
    part_type_orientation(particle2,0,0,0,0,1);
    part_type_blend(particle2,1);
    part_type_life(particle2,10,30);
    
    emitter2 = part_emitter_create(Sname2);
    part_emitter_region(Sname2,emitter2,x,x,y,y,0,0);
    part_emitter_burst(Sname2,emitter2,particle2,5); 
    phy_rotation = -Direction;  
    if distance_to_object(oRama) &gt; view_wview
    {
        instance_destroy();
    }     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_self();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,12</point>
    <point>32,12</point>
    <point>32,28</point>
    <point>12,28</point>
  </PhysicsShapePoints>
</object>
