<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBossWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

phy_fixed_rotation = true;

State = "Idle";
HP = 13;
MaxHealth = 13;

Activation = 4;

Shots  = 3;

AttackRange = 75;
MoveRange = 500;

MoveDist = 500;
AttackDist = MoveDist/9.5;//MoveDist*1000000;
Attacks = 3;

DashX = oRama.x;
DashY = oRama.y;
NextAttack = choose("Attacking","Shooting");

HasShot = false;

alarm[1] = 1;
alarm[9] = 1;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking the player wait


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack wait

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///idk

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dashes
if State = "AttackingWait"
{
    if Attacks &gt; 0
    {
        State = "Attacking"
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
depth = -phy_position_y;

if distance_to_object(oRama) &lt; MoveRange &amp;&amp; distance_to_object(oRama) &gt; AttackRange &amp;&amp; State != "Attacking"  &amp;&amp; Attacks = 3 &amp;&amp; State != "Shooting" &amp;&amp; State != "PrepShooting"
{
    State = "Walking";
    physics_apply_impulse(x,y,lengthdir_x(MoveDist,point_direction(x,y,oRama.x,oRama.y)),lengthdir_y(MoveDist,point_direction(x,y,oRama.x,oRama.y)))
}

if distance_to_object(oRama) &lt;= AttackRange &amp;&amp; Attacks = 3 &amp;&amp; HasShot = false
{
    State = NextAttack
    
    //State = "Attacking"
}

if State = "Attacking" &amp;&amp; Attacks &gt; 0
{
    if alarm[0] = -1 
    {        
        alarm[0] = 30*2;
        DashX = oRama.x;
        DashY = oRama.y;
        PD = point_direction(x,y,DashX,DashY)
    }
    else
    {
        phy_position_x += lengthdir_x(AttackDist,PD)
        phy_position_y += lengthdir_y(AttackDist,PD)
        //physics_apply_impulse(x,y,lengthdir_x(AttackDist,PD),lengthdir_y(AttackDist,PD));
    }
}
if State != "Attacking"
{
    if x &lt; oRama.x
    {
        image_xscale = 1;
    }
    else
    {
        image_xscale = -1;
    }
}

if Activation = 0
{
    if place_meeting(x,y,oRama)
    {
        if oRama.State = "Kicking"
        {
            if alarm[1] = -1
            {
                alarm[1] = 20;
                HP -= 1;
                instance_create(x,y,oScreenShake);
                audio_play_sound(sndImpact,3,false);
            }
        }
    }
}
if alarm[1] = -1
{
    image_blend = c_white;
}
else
{
    image_blend = c_red;
}

if HP &lt;= 0
{
    State = "Dead"
    image_blend = c_white;
}


if State = "Idle"
{
    sprite_index = sBossWalk;
    image_speed = .25;
}
if State = "Walking" || State = "AttackingWait"
{
    sprite_index = sBossWalk;
    image_speed = .25
}
if State = "Attacking" 
{
    if image_index = 0
    {
        audio_play_sound(sndSlimeDeath,0,false);
    }
    //if alarm[0] = -1
    {
        //physics_apply_force(x,y,lengthdir_x(AttackDist,point_direction(x,y,oRama.x,oRama.y)),lengthdir_y(AttackDist,point_direction(x,y,oRama.x,oRama.y)))
        audio_play_sound(sndBossGrowl,2,false);
        audio_sound_gain(sndBossGrowl,1000,0);
        sprite_index = sBossDashAttack;
        image_speed = .5;
        
    }

    if image_index = 2
    {
        audio_play_sound(sndBossSlice,2,false);
    }
    
}
if State = "Dead"
{
    if audio_is_playing(sndBossMusic)
    {
        audio_sound_gain(sndBossMusic,0,500);
    }
    sprite_index = sMiniBoss2Death;
    image_speed = .5;
    room_speed = 15;
    Sname = part_system_create();
    particle1 = part_type_create();
    part_type_shape(particle1,pt_shape_explosion);
    part_type_size(particle1,0.50,0.50,0.50,1);
    part_type_scale(particle1,0.50,0.50);
    part_type_color3(particle1,0,16711808,8388672);
    part_type_alpha1(particle1,1);
    part_type_speed(particle1,1,1,1,1);
    part_type_direction(particle1,0,359,0,1);
    part_type_gravity(particle1,1,90);
    part_type_orientation(particle1,0,0,0,0,1);
    part_type_blend(particle1,0);
    part_type_life(particle1,1,20);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle1,5);
    particle2 = part_type_create();
    part_type_shape(particle2,pt_shape_pixel);
    part_type_size(particle2,1,1,0,0.50);
    part_type_scale(particle2,2,1);
    part_type_color1(particle2,16711808);
    part_type_alpha1(particle2,1);
    part_type_speed(particle2,1,1,0,0);
    part_type_direction(particle2,0,359,0,0);
    part_type_gravity(particle2,0,270);
    part_type_orientation(particle2,0,0,0,0,1);
    part_type_blend(particle2,1);
    part_type_life(particle2,10,60);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle2,5);
    particle3 = part_type_create();
    part_type_shape(particle3,pt_shape_pixel);
    part_type_size(particle3,1,1,0,0);
    part_type_scale(particle3,2,1);
    part_type_color1(particle3,8388672);
    part_type_alpha1(particle3,1);
    part_type_speed(particle3,1,1,0,0);
    part_type_direction(particle3,0,359,0,0);
    part_type_gravity(particle3,0,270);
    part_type_orientation(particle3,0,0,0,0,1);
    part_type_blend(particle3,1);
    part_type_life(particle3,10,70);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_rectangle,0);
    part_emitter_burst(Sname,emitter1,particle3,5);
}

if alarm[2] = 1 || alarm[2] = 2
{
    Attacks = 3; //reset attacks
    State = "Walking"
    HasShot = false
}
if State = "Shooting"
{
    sprite_index = sBossPrepShoot;
    image_speed = .25;
    if image_index = 9
    {
        a = instance_create(x,y-267,oBossProjectile);
        a.PD = point_direction(x,y-267,oRama.x,oRama.y);
        
    }
}
if State = "PrepShooting"
{
    sprite_index = sBossPrepShoot;
    image_speed = .5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
if State = "Attacking" 
{
    if Attacks &gt; 0
    {
        
        State = "AttackingWait";
        sprite_index = sBossWalk
        Attacks --; 
        
    }
    else
    {
        State = "Walking";
        
    }
    oControl.boi = 0;
    oControl.angle = round(random(360));
}
if (State = "AttackingWait" &amp;&amp; Attacks = 0) || State = "Shooting"
{
    State = "Walking"
    NextAttack = choose("Attacking","Shooting")
    alarm[2] = 30*3;
}
image_index = 0

if State = "Dead"
{
    room_speed = 30;
    instance_create(x,y,oRoomTransition);
    instance_destroy();
}
/*if State = "PrepShooting"
{
    State = "Shooting";
    HasShot = true;
}*/
if State = "Shooting"
{
    State = "Walking";
    HasShot = true;
    NextAttack = choose("Attacking","Shooting");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*draw_text(x,y,Attacks);
*/
/*
if audio_is_playing(sndBossMusic)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    //draw_text(view_xview+view_wview/2,view_yview+view_hview-sprite_get_height(sBossGUI)*2,"Tahot")
    draw_sprite(sBossTitle,0,view_xview+view_wview/2,view_yview + view_hview-sprite_get_height(sBossGUI)/2 - sprite_get_height(sBossTitle)/2 );
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_sprite(sBossGUI,0,view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI)/2);
    draw_sprite_part(sBossGUI,1,0,0,(HP/MaxHealth)*sprite_get_width(sBossGUI),sprite_get_height(sBossGUI),view_xview+view_wview/2-sprite_get_width(sBossGUI)/2,view_yview+view_hview-sprite_get_height(sBossGUI));

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>20</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>20</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>48,192</point>
    <point>112,192</point>
    <point>80,240</point>
  </PhysicsShapePoints>
</object>
