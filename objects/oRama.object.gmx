<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sRiahuraIdleDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats
randomize();
a = instance_create(x,y,oPlayerMask);
a.ID = id;
phy_fixed_rotation = true;
//Dialogue
NPC = -1;

//Spells
SpellCasting = false


//Reset
LastX = view_wview/2;
LastY = view_hview/2;

//Health &amp;&amp; Energy
MaxHealth = 100;
MaxEnergy = 100;
Health = 100;
Energy = 100;
Shards = 3;

//Walking and states
WalkSpeed = 7*5;
State = "Idle";
Dir = "Down";
LookDir = "Down";
LookNum = 3;
image_speed = .25;
phy_fixed_rotation = true;
DashX = 0;
DashY = 0;
DashDelay = 10;
DashShow = 15;
DashAnimations = 8;
Z = choose(1,2,3);
DashDistance = 150;
PD = 0
RunMult = 1.5; //Run Speed pretty much
Change = 0; //Riahura = 0; Rama = 1;
TimesChanged = 0;
Bubble = false; //because
combo = 0
comboMax = 4
Element = 1;
CurrentSpell = 1;
Shards = 3;
BulletXOffSet = 0;
BulletYOffSet = 0;

//Controls
WalkUp = ord("Z");
WalkLeft = ord("Q");
WalkDown = ord("S");
WalkRight = ord("D");
RestartGame = ord("R");
SwitchGun = "MouseScroll";
Shoot = mb_right;
Melee = mb_left
Pause = vk_space;
Action = vk_shift;
SwitchElement = ord("E")

//Resource costs
DashCost = 7; //10 energy to dash
EnergyRegenSpeed = 30*.75; //Every second
EnergyRegenAmount = 1; //Self explanitory
alarm[1] = EnergyRegenSpeed;





//Gun &amp;&amp; Ammo
MeleeReach = 30;
CurrentGun = choose(1,2);

Guns = ds_grid_create(100,100);
i = 1;
ds_grid_set(Guns,i,1,"Pistol") //Name
ds_grid_set(Guns,i,2,10); //Ammo per clip
ds_grid_set(Guns,i,3,5); //Max clips
ds_grid_set(Guns,i,4,1.5); //Reload time
ds_grid_set(Guns,i,5,.2); //Attack Speed

i ++;
ds_grid_set(Guns,i,1,"Poop Gun") //Name
ds_grid_set(Guns,i,2,3); //Ammo per clip
ds_grid_set(Guns,i,3,6); //Max clips
ds_grid_set(Guns,i,4,3); //Reload time
ds_grid_set(Guns,i,5,1); //Attack Speed


//Inventory
Inventory = ds_grid_create(5,5);
Ammo = ds_grid_create(5,5);
Clips = ds_grid_create(5,5);

ds_grid_set(Inventory,1,1,1);
ds_grid_set(Ammo,1,1,10);
ds_grid_set(Clips,1,1,5);

ds_grid_set(Inventory,2,1,1);
ds_grid_set(Ammo,2,1,6);
ds_grid_set(Clips,2,1,3);


Spells = ds_grid_create(5,5)
for(i = 0; i &lt; 3; i ++)
{
    for(ii = 0; ii &lt;3; ii ++)
    {
        ds_grid_set(Spells,i,ii,ii+i*3);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat sprites

ComboSprites[1,1] = sRiahuraSwordRight1
ComboSprites[1,2] = sRiahuraSwordRight2
ComboSprites[1,3] = sRiahuraSwordRight3

ComboSprites[2,1] = sRiahuraSwordUp1
ComboSprites[2,2] = sRiahuraSwordUp2
ComboSprites[2,3] = sRiahuraSwordUp3

ComboSprites[3,1] = sRiahuraSwordLeft1
ComboSprites[3,2] = sRiahuraSwordLeft2
ComboSprites[3,3] = sRiahuraSwordLeft3

ComboSprites[4,1] = sRiahuraSwordDown1
ComboSprites[4,2] = sRiahuraSwordDown2
ComboSprites[4,3] = sRiahuraSwordDown3

cursor_sprite = sCursor;
window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>101</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>000000000</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Realm Swap

if oCamera.Character = "Riahura"
{
    Change = 1;
}
if oCamera.Character = "Rama"
{
    Change = 0;
}
TimesChanged ++;

for(i = 0; i &lt; room_width/60; i ++)
{
    for(ii = 0; ii &lt; room_height/60; ii ++)
    {
        tile = tile_layer_find(1000000-TimesChanged+1, 60*i, 60*ii);
        if tile != -1
        {
            bg = tile_get_background(tile);
            xx = tile_get_x(tile)
            yy = tile_get_y(tile)
            left = tile_get_left(tile)
            top = tile_get_top(tile)
            xscale = tile_get_xscale(tile)
            yscale = tile_get_yscale(tile)
            
            if oCamera.Character = "Riahura"
            { 
                
                a = tile_add(bg,left-660,top,60,60,xx,yy,1000000-TimesChanged);
                tile_set_scale(a,xscale,yscale)
                tile_layer_delete(1000000-TimesChanged+2)
            }
            if oCamera.Character = "Rama"
            {
                
                a = tile_add(bg,left+660,top,60,60,xx,yy,1000000-TimesChanged);
                tile_set_scale(a,xscale,yscale)
                tile_layer_delete(1000000-TimesChanged+2)
            }
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///combo wait

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///combo reset
combo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RunMult = 1.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload Speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack Speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Energy

Energy += EnergyRegenAmount;
alarm[1] = EnergyRegenSpeed/5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State = "Idle";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States
if Health &lt;= 0
{
    game_restart();
}
//Debugging/Restart game
/*if keyboard_check_pressed(RestartGame)
{
    if room != rmGame
    {
        room_goto(rmGame)
    }
    else
    {
        room_goto(rmGame2)
    }
}*/
if collision_point(x,y,oRealmSwapZone,true,false)
{
    if oCamera.Character = "Rama"
    {
        if keyboard_check_pressed(ord("E"))
        {
            oCamera.Character = "Riahura";
            with(oRama)
            {
                sprite_index = sRiahuraRunDown;
                //alarm[11] = 1;
            }
            
        }
        
    }
    else
    {
        if keyboard_check_pressed(ord("E"))
        {
            oCamera.Character = "Rama";
            with(oRama)
            {
                sprite_index = sRamaRunDown;
                //oalarm[11] = 1;
            }
        }
    }
}
if SpellCasting = false &amp;&amp; State != "Kicking" &amp;&amp; State != "NejiShooting" &amp;&amp; instance_number(oRamaDash) &lt;= 8 &amp;&amp; !instance_exists(oRoomTransition)
{
    //Walking
    
    
    if keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown) &amp;&amp; (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
             
    {
        physics_apply_impulse(x,y,-WalkSpeed*RunMult,0);
        State = "Walking";
        Dir = "Left";
    }
    if keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown)&amp;&amp; (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
    {
        physics_apply_impulse(x,y,WalkSpeed*RunMult,0);
        State = "Walking";
        Dir = "Right";
    }
    if keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkDown) &amp;&amp; (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
    {
        physics_apply_impulse(x,y,0,-WalkSpeed*RunMult);
        State = "Walking";
        Dir = "Up";
    }
    if keyboard_check(WalkDown) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkLeft)&amp;&amp; (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
    {
        physics_apply_impulse(x,y,0,WalkSpeed*RunMult);
        State = "Walking";
        Dir = "Down";
    }
    
    
    
    if keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown)&amp;&amp; (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
    {
        physics_apply_impulse(x,y,lengthdir_x(-WalkSpeed*RunMult,45),lengthdir_y(-WalkSpeed*RunMult,-45));
        State = "Walking";
        Dir = "UpLeft";
    }
    if keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkLeft) &amp;&amp; keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown)&amp;&amp; (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
    {
        physics_apply_impulse(x,y,lengthdir_x(WalkSpeed*RunMult,45),lengthdir_y(-WalkSpeed*RunMult,-45));
        State = "Walking";
        Dir = "UpRight";
    }
    if keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; keyboard_check(WalkDown)&amp;&amp;  (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
    {
        physics_apply_impulse(x,y,lengthdir_x(-WalkSpeed*RunMult,45),lengthdir_y(WalkSpeed*RunMult,-45));
        State = "Walking";        
        Dir = "DownLeft";
    }
    if keyboard_check(WalkDown) &amp;&amp; keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkLeft)&amp;&amp;  (!keyboard_check(Action) || (keyboard_check(Action) &amp;&amp; Energy &lt; DashCost) || alarm[0] != -1)
    {
        physics_apply_impulse(x,y,lengthdir_x(WalkSpeed*RunMult,45),lengthdir_y(WalkSpeed*RunMult,-45));
        State = "Walking";
        Dir = "DownRight";
    }
    
    
    
    
    
    
   
    if oCamera.Character = "Riahura"
    {
        if alarm[0] = -1
        {
            if keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown) &amp;&amp; keyboard_check(Action)
            {
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x-100,phy_position_y,oWall)
                    {
                        phy_position_x += lengthdir_x(DashDistance,180);
                    }
                    
                    State = "Dashing";
                    Dir = "Left";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
            }
            if keyboard_check(WalkRight)&amp;&amp; !keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown) &amp;&amp; keyboard_check(Action)
            {
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x+100,phy_position_y,oWall)
                    {
                        phy_position_x += lengthdir_x(DashDistance,0);
                    }
                    State = "Dashing";
                    Dir = "Right";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
            }
            if keyboard_check(WalkUp)&amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkDown)&amp;&amp; keyboard_check(Action)
            {
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x,phy_position_y-100,oWall)
                    {
                        phy_position_y += lengthdir_y(DashDistance,90);
                    }
                    State = "Dashing";
                    Dir = "Up";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
                
            }
            if keyboard_check(WalkDown)&amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkLeft)&amp;&amp; keyboard_check(Action)
            {
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x,phy_position_y+100,oWall)
                    {
                        phy_position_y += lengthdir_y(DashDistance,270);
                    }
                    State = "Dashing";
                    Dir = "Down";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
            }
            
            
            
            
            
            if keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown)&amp;&amp; keyboard_check(Action)
            {
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x,phy_position_y-100,oWall)
                    {
                        phy_position_x += lengthdir_x(DashDistance,45+90);
                        phy_position_y += lengthdir_y(DashDistance,45+90);
                    }
                    State = "Dashing";
                    Dir = "UpLeft";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
            }
            if keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkLeft) &amp;&amp; keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown)&amp;&amp; keyboard_check(Action)
            {
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x,phy_position_y-100,oWall)
                    {
                        phy_position_x += lengthdir_x(DashDistance,45);
                        phy_position_y += lengthdir_y(DashDistance,45);
                    }
                    State = "Dashing";
                    Dir = "UpRight";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
            
            }
            if keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; keyboard_check(WalkDown)&amp;&amp; keyboard_check(Action)
            {
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x,phy_position_y-100,oWall)
                    {
                        phy_position_x += lengthdir_x(DashDistance,45+180);
                        phy_position_y += lengthdir_y(DashDistance,45+180);
                    }
                    State = "Dashing";
                    Dir = "DownLeft";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
            }
            if keyboard_check(WalkDown) &amp;&amp; keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkLeft)&amp;&amp; keyboard_check(Action)
            {   
                if Energy &gt;= DashCost
                {
                    DashX = phy_position_x;
                    DashY = phy_position_y;
                    //if !place_meeting(phy_position_x,phy_position_y-100,oWall)
                    {
                        phy_position_x += lengthdir_x(DashDistance,45+270);
                        phy_position_y += lengthdir_y(DashDistance,45+270);
                    }
                    State = "Dashing";
                    Dir = "DownRight";
                    alarm[0] = DashDelay;
                    alarm[10] = DashShow;
                    Energy -= DashCost;
                    /*a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 0;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 1;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 2;
                    a = instance_create(DashX,DashY,oRamaDash);
                    a.Dir = Dir
                    a.i = 3;*/
                    for(i = 0; i &lt;= DashAnimations; i ++)
                    {
                        a = instance_create(DashX,DashY,oRamaDash);
                        a.i = i;
                        a.Dir = Dir;
                    }
                }
            
            }
        }
            
            
            
            
            
            
            
        }

    
    
    
    
    //Stop Walking
    if !keyboard_check(WalkLeft) &amp;&amp; !keyboard_check(WalkRight) &amp;&amp; !keyboard_check(WalkUp) &amp;&amp; !keyboard_check(WalkDown)
    {
        State = "Idle";
    }
    
    
    //Controlling Animation
    if oCamera.Character = "Riahura"
    {
        if State = "Idle"
        {
            if Dir = "Down"
            {
                sprite_index = sRiahuraIdleDown;
                
            }
            if Dir = "DownRight"
            {
                sprite_index = sRiahuraIdleDownRight;
                
            }
            if Dir = "DownLeft"
            {
                sprite_index = sRiahuraIdleDownLeft;
                
            }
            if Dir = "Up"
            {
                sprite_index = sRiahuraIdleUp;
                
            }
            if Dir = "UpRight"
            {
                sprite_index = sRiahuraIdleUpRight;
                
            }
            if Dir = "UpLeft"
            {
                sprite_index = sRiahuraIdleUpLeft;
                
            }
            if Dir = "Right"
            {
                sprite_index = sRiahuraIdleRight;
                
            }
            if Dir = "Left"
            {
                sprite_index = sRiahuraIdleLeft;
                
            }
            image_speed = .25;
        }
    }
    else
    {
        if State = "Idle"
        {
            if Dir = "Down"
            {
                sprite_index = sRamaIdle;
                image_index = 0;
                //image_speed = .25;
            }
            if Dir = "DownRight"
            {
                sprite_index = sRamaIdle;
                image_index = 7;
                //sprite_index = sRiahuraIdleDownRight;
                //image_speed = .25;
            }
            if Dir = "DownLeft"
            {
                sprite_index = sRamaIdle;
                image_index = 1;
                //sprite_index = sRiahuraIdleDownLeft;
                //image_speed = .25;
            }
            if Dir = "Up"
            {
                sprite_index = sRamaIdle;
                image_index = 4;
                //sprite_index = sRiahuraIdleUp;
                //image_speed = .25;
            }
            if Dir = "UpRight"
            {
                sprite_index = sRamaIdle;
                image_index = 5;
                //sprite_index = sRiahuraIdleUpRight;
                //image_speed = .25;
            }
            if Dir = "UpLeft"
            {
                sprite_index = sRamaIdle;
                image_index = 3;
                //sprite_index = sRiahuraIdleUpLeft;
                //image_speed = .25;
            }
            if Dir = "Right"
            {
                sprite_index = sRamaIdle;
                image_index = 6;
                //sprite_index = sRiahuraIdleRight;
                //image_speed = .25;
            }
            if Dir = "Left"
            {
                sprite_index = sRamaIdle;
                image_index = 2;
                //sprite_index = sRiahuraIdleLeft;
                //image_speed = .25;
            }
            image_speed = 0;
        }
    }
    if State = "Walking"
    {
        if Dir = "Left"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunLeft;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunLeft;
    
                image_speed = .35;
                //image_index = 0;
            }
        }
        if Dir = "Right"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunRight;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunRight;
                
                image_speed = .35;
                //image_index = 0;
            }
        }
    
        if Dir = "Up"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunUp;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunUp;
                
                image_speed = .35;
                //image_index = 0;
            }
        }
    
        if Dir = "Down"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunDown;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunDown;
                image_speed = .35;
                //image_index = 0;
            }
        }
    
        
        
        
        
        
        
        
        if Dir = "UpLeft"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunUpLeft;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunUpLeft;
    
                image_speed = .35;
                //image_index = 0;
            }
        }
        if Dir = "UpRight"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunUpRight;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunUpRight;
                
                image_speed = .35;
                //image_index = 0;
            }
        }
    
        if Dir = "DownLeft"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunDownLeft;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunDownLeft;
                
                image_speed = .35;
                //image_index = 0;
            }
        }
    
        if Dir = "DownRight"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunDownRight;
                image_speed = .5;
            }
            else
            {
                sprite_index = sRiahuraRunDownRight;
                image_speed = .35;
                //image_index = 0;
            }
        }
    
        
    }
    
    
    
    
    
    if State = "Dashing"
    {
        if Dir = "Left"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunLeft;
            }
            else
            {
                sprite_index = sRiahuraDashLeft;
                image_speed = 0;
            }
        }
        if Dir = "Right"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunRight;
            }
            else
            {
                sprite_index = sRiahuraDashRight;
                image_speed = 0;
            }
        }
    
        if Dir = "Up"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunUp;
            }
            else
            {
                sprite_index = sRiahuraDashUp;
                image_speed = 0;
            }
        }
    
        if Dir = "Down"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunDown;
            }
            else
            {
                sprite_index = sRiahuraDashDown;
                image_speed = 0;
            }
        }
        if Dir = "DownLeft"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunDownLeft;
            }
            else
            {
                sprite_index = sRiahuraDashDownLeft;
                image_speed = 0;
            }
        }
        if Dir = "UpLeft"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunUpLeft;
            }
            else
            {
                sprite_index = sRiahuraDashUpLeft;
                image_speed = 0;
            }
        }
    
        if Dir = "UpRight"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunUpRight;
            }
            else
            {
                sprite_index = sRiahuraDashUpRight;
                image_speed = 0;
            }
        }
    
        if Dir = "DownRight"
        {
            if oCamera.Character = "Rama"
            {
                sprite_index = sRamaRunDownRight;
            }
            else
            {
                sprite_index = sRiahuraDashDownRight;
                image_speed = 0;
            }
        }
        image_index = 0;
        //image_speed = .25;
    }
    
    
    
    
    
    
    
        
}
else
{
    if State = "Kicking"
    {
        if LookDir = "Up"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUp;
            }
            else
            {
                sprite_index = ComboSprites[LookNum,combo];
                image_speed = .5;
                //image_index = 0;
            }
        }
        if LookDir = "UpLeft"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUpLeft;
            }
            else
            {
                //sprite_index = sRiahuraSwordUpLeft;
                image_speed = .5;
                //image_index = 0;
            }
        }
        if LookDir = "UpRight"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUpLeft;
            }
            else
            {
                //sprite_index = sRiahuraSwordUpRight;
                image_speed = .5;
                //image_index = 0;
            }
        }
        if LookDir = "Down"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUp;
            }
            else
            {
                sprite_index = ComboSprites[LookNum,combo];
                image_speed = .5;
                //image_index = 0;
            }
        }
        if LookDir = "DownLeft"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUpLeft;
            }
            else
            {
                //sprite_index = sRiahuraSwordDownLeft;
                image_speed = .5;
                //image_index = 0;
            }
        }
        if LookDir = "DownRight"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUpLeft;
            }
            else
            {
                //sprite_index = sRiahuraSwordDownRight;
                image_speed = .5;
                //image_index = 0;
            }
        }
        if LookDir = "Left"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUpLeft;
            }
            else
            {
                sprite_index = ComboSprites[LookNum,combo];
                image_speed = .5;
                //image_index = 0;
            }
        }
        if LookDir = "Right"
        {
            if oCamera.Character = "Rama"
            {
                //sprite_index = sRiahuraSwordUpLeft;
            }
            else
            {
                sprite_index = ComboSprites[LookNum,combo];
                image_speed = .5;
                //image_index = 0;
            }
        }
        
    }
}

if State = "NejiShooting"
{
    if LookDir = "Down"
    {
        sprite_index = sRamaShootDown;
    }
    if LookDir = "Right"
    {
        sprite_index = sRamaShootRight;
    }
    if LookDir = "Up"
    {
        sprite_index = sRamaShootUp;
    }
    if LookDir = "Left"
    {
        sprite_index = sRamaShootLeft;
    }
    image_speed = .5;
}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles

/*if mouse_check_button_pressed(mb_right)
{
    ButtStuff = part_system_create();
    penis = part_type_create();
    part_type_shape(penis,pt_shape_circle);
    part_type_size(penis,0.10,0.10,0,0);
    part_type_scale(penis,3,3);
    part_type_color2(penis,8453888,8454016);
    part_type_alpha1(penis,1);
    part_type_speed(penis,20,20,0,0);
    part_type_direction(penis,0,359,2,0);
    part_type_gravity(penis,0,270);
    part_type_orientation(penis,0,0,0,0,1);
    part_type_blend(penis,1);
    part_type_life(penis,180,180);
    mitter2 = part_emitter_create(ButtStuff);
    part_emitter_region(ButtStuff,mitter2,x,x,y,y,ps_shape_ellipse,1);
    part_emitter_burst(ButtStuff,mitter2,penis,100);

}*/

if oCamera.Character = "Riahura"
//if keyboard_check_pressed(vk_tab)
{
    /*Sname = part_system_create();
    part_system_depth(Sname, depth+1 );
    particle1 = part_type_create();
    part_type_shape(particle1,pt_shape_pixel);
    part_type_size(particle1,.50,.50,0,0.50);
    part_type_scale(particle1,1,1);
    part_type_color3(particle1,16777215,16777088,8453888);
    part_type_alpha1(particle1,1);
    part_type_speed(particle1,1,1,0,0);
    part_type_direction(particle1,-45,225,0,20);
    part_type_gravity(particle1,0.20,90);
    part_type_orientation(particle1,1,30,0,10,1);
    part_type_blend(particle1,1);
    part_type_life(particle1,10,15);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y-sprite_height+35,y-sprite_height+55,ps_shape_ellipse,1);
    part_emitter_burst(Sname,emitter1,particle1,20);*/
/*Sname = part_system_create();
particle1 = part_type_create();
part_type_sprite(particle1,sIceSpike,0,0,0);
part_type_size(particle1,1,0.10,0,5);
part_type_scale(particle1,0.40,0.40);
part_type_color3(particle1,16777215,16777215,14671616);
part_type_alpha1(particle1,1);
part_type_speed(particle1,1,1,0,1);
part_type_direction(particle1,0,359,0,1);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,0,2,1);
part_type_blend(particle1,0);
part_type_life(particle1,1,21);

emitter1 = part_emitter_create(Sname);
part_emitter_region(Sname,emitter1,x,x,y,y,0,0);
part_emitter_stream(Sname,emitter1,particle1,5);

Sname2 = part_system_create();
particle2 = part_type_create();
part_type_sprite(particle2,sIceSpike,0,0,0);
part_type_size(particle2,1,1,0,0);
part_type_scale(particle2,1,1);
part_type_alpha1(particle2,1);
part_type_speed(particle2,0,3,0,0);
part_type_direction(particle2,0,359,0,0);
part_type_gravity(particle2,0,270);
part_type_orientation(particle2,0,0,0,0,1);
part_type_blend(particle2,1);
part_type_life(particle2,10,30);

emitter2 = part_emitter_create(Sname2);
part_emitter_region(Sname2,emitter2,x,x,y,y,0,0);
part_emitter_stream(Sname2,emitter2,particle2,5);    */

}

/*var Transition = false;
var i = 0;

if keyboard_check_pressed(ord("o"))
{
    Transition = true;
}
if Transition = true
{
    if i &lt;= 1000 
    {
        i += 1;
        scrScreenTransition(i,phy_position_x,phy_position_y);
    }
    else
    {
        i = 0;
        Transition = false;
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
depth = -phy_position_y;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Z motion

//Col = draw_getpixel(phy_position_x,phy_position_y)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting Hit by projectiles and AI

/*if place_meeting(x,y,oSkoiders)
{
    a = instance_nearest(x,y,oSkoiders)
    if a.image_index &gt;= 2 &amp;&amp; a.State = "Attack"
    {   
        //physics_apply_impulse(x,y,lengthdir_x(1000,point_direction(a.x,a.y,x,y)),lengthdir_y(1000,-point_direction(x,y,a.x,a.y)))
        //Health -= 10;
    }
}
*/

if place_meeting(x,y,oMBSpikeBall)
{
    if oMBSpikeBall.image_index &gt;= 2 &amp;&amp; oMBSpikeBall.sprite_index = sMiniBossAttack &amp;&amp; oMBSpikeBall.alarm[10] = -1
    {   
        Health -= 5
        oMBSpikeBall.alarm[10] = 30*.75;
        
        physics_apply_impulse(x,y,lengthdir_x(1000000,point_direction(x,y,oMBSpikeBall.x,oMBSpikeBall.y)),lengthdir_y(100000,-point_direction(x,y,oMBSpikeBall.x,oMBSpikeBall.y)))
        
    }
}
if place_meeting(x,y,oBoss)
{
    if oBoss.sprite_index = sBossDashAttack &amp;&amp; oBoss.alarm[9] = -1
    {   
        Health -= 6
        oBoss.alarm[9] = 30*1;
        
        physics_apply_impulse(x,y,lengthdir_x(100000,point_direction(x,y,oBoss.x,oBoss.y)),lengthdir_y(100000,-point_direction(x,y,oBoss.x,oBoss.y)))
        instance_create(x,y,oScreenShake);
    }
}



if place_meeting(x,y,oSpikeBall)
{
    a = instance_nearest(x,y,oSpikeBall);
    if a.image_index &gt;= 2 &amp;&amp; a.sprite_index = sSpikeSlimeAttack &amp;&amp; a.alarm[10] = -1
    {   
        Health -= 8
        a.alarm[10] = 30*1.5;
        
        physics_apply_impulse(x,y,lengthdir_x(100000,point_direction(x,y,a.x,a.y)),lengthdir_y(100000,-point_direction(x,y,a.x,a.y)))
        
    }
}

if place_meeting(x,y,oMBSpiritEater)
{
    a = instance_nearest(x,y,oMBSpiritEater);
    if a.image_index &gt;= 2 &amp;&amp; a.sprite_index = sMiniBoss2Attack &amp;&amp; a.alarm[10] = -1
    {   
        Health -= 7
        a.alarm[10] = 30*1.5;
        
        //physics_apply_impulse(x,y,lengthdir_x(100000,point_direction(x,y,a.x,a.y)),lengthdir_y(100000,-point_direction(x,y,a.x,a.y)))
        
    }
}

aye = instance_nearest(x,y,oSpikePit)
if place_meeting(x,y,aye)
{
    if alarm[4] = -1 
    {
        Health -= 6;
        RunMult = .5;
        alarm[4] = 30*1.5; //Slowed for           
       
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

Energy = clamp(Energy,0,MaxEnergy);
Health = clamp(Health,0,MaxHealth);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting &amp;&amp; attacking
if(mouse_check_button_pressed(mb_right) &amp;&amp; Shards &gt; 0)
{
    Shards -= 1;
}

Shards = clamp(Shards,0,3);

if keyboard_check_pressed(SwitchElement)
{
    /*if Element &lt; 2
    {
        Element ++;
    }
    else
    {
        Element = 0;
    }
    
    oControl.alarm[10] = 30;*/
    if Element != 1
    {
        Element = 1;
    }
    else
    {
        Element = 2;
    }
}
/*if keyboard_check_pressed(ord("1"))
{
    CurrentSpell = 1;
}
if keyboard_check_pressed(ord("2"))
{
    CurrentSpell = 2;
}
if keyboard_check_pressed(ord("3"))
{
    CurrentSpell = 3;
}*/
/*if mouse_wheel_up()
{
    if CurrentSpell &lt;= 2
    {
        CurrentSpell ++;
    }
    else
    {
        CurrentSpell = 1;
    }
}
if mouse_wheel_down()
{
    if CurrentSpell &gt; 0
    {
        CurrentSpell --;
    }
    else
    {
        CurrentSpell = 3;
    }
}*/
if oCamera.Character = "Riahura" &amp;&amp; !instance_exists(oRoomTransition)
{
    if mouse_check_button_pressed(Melee)  &amp;&amp; SpellCasting = false &amp;&amp; alarm[9] = -1
    {
        if Energy &gt; 7
        {
        State = "Kicking";
        if combo != 0
        {
            phy_position_x += lengthdir_x(WalkSpeed/2,point_direction(x,y,mouse_x,mouse_y));
            phy_position_y += lengthdir_y(WalkSpeed/2,point_direction(x,y,mouse_x,mouse_y));
        }
        
        if combo &lt; comboMax-1
        {
            combo = (combo+1);
            view_wview -= 1.77777777*5;
            view_hview -= 1*5;
      
        }
        else
        {
            combo = 1
        }
        /*if combo != comboMax -1
        {
            audio_play_sound(sndSwordSwing,0,false);
        }
        else
        {
            audio_play_sound(sndSwordSwing2,0,false);
        }*/
        alarm[8] = 50; //Reseting combo
        alarm[9] = 3; //Wait till finish attack
        
        
        audio_play_sound(sndSwordSwing,0,false);
        audio_sound_pitch(sndSwordSwing,((comboMax-combo)/3)+.5)
        
        image_index = 0;
        Energy -= 7;
        }
    }    
    if(mouse_check_button_pressed(Shoot) &amp;&amp; SpellCasting == false &amp;&amp; Shards &gt; 0)
    {
        //If you have bullets
        //if ds_grid_get(Ammo,CurrentGun,1) &gt; 0
        {
            //if you are not in the middle of a shot
            //if alarm[2] = -1
            {
                // if you are not reloading
                //if alarm[3] = -1
                {
                    //Shoot in the direction
                    
                    /*if ds_grid_get(Spells,Element,CurrentSpell) = 5 
                    {  
                        if Shards &gt; 0 
                        {
                            Shards --;
                            image_index = 0;
                            sprite_index = sRiahuraSpellCast1;
                            image_speed = .5;
                            SpellCasting = true;
                        }
                    }*/
                    //else
                    {   
                        image_index = 0;
                        if LookDir = "Up"
                        {
                            sprite_index = sRiahuraSP2Up;
                        }
                        if LookDir = "UpLeft"
                        {
                            sprite_index = sRiahuraSP2UpLeft;
                        }
                        if LookDir = "UpRight"
                        {
                            sprite_index = sRiahuraSP2UpRight;
                        }   
                        if LookDir = "Down"
                        {
                            sprite_index = sRiahuraSP2Down;
                        }
                        if LookDir = "DownLeft"
                        {
                            sprite_index = sRiahuraSP2DownLeft;
                        }
                        if LookDir = "DownRight"
                        {
                            sprite_index = sRiahuraSP2DownRight;
                        }   
                        if LookDir = "Left"
                        {
                            sprite_index = sRiahuraSP2Left;
                        }
                        if LookDir = "Right"
                        {
                            sprite_index = sRiahuraSP2Right;
                        }   
                        image_speed = .5;
                        SpellCasting = true;
                    }
                }
            }
        }
        //else
        {
            //alarm[3] = ds_grid_get(Guns,CurrentGun,4)*30;
        }
    }
    
    if SpellCasting = true
    {
        if sprite_index = sRiahuraSpellCast1
        {
            if image_index = 0
            {
                a = instance_create(x,y,oBullet);
                a.Direction = point_direction(x,y,mouse_x,mouse_y);
                a.Speed = 10;
                a.Type = ds_grid_get(Spells,Element,CurrentSpell);
                alarm[2] = ds_grid_get(Guns,CurrentGun,5)*30;
                ds_grid_add(Ammo,CurrentGun,1,-1);
            }
              
        }
        else
        {
            if image_index = 3
            {
                a = instance_create(x-33+26,y-78+38,oBullet);
                a.Direction = point_direction(x-33+26,y-78+38,mouse_x,mouse_y);
                a.Speed = 10;
                a.Damage = 0;
                a.Type = Element//ds_grid_get(Spells,Element,CurrentSpell);
                a.Depth = depth - 80;
                alarm[2] = 2*30;
                ds_grid_add(Ammo,CurrentGun,1,-1);
            }
        }
    }
}
if oCamera.Character = "Rama"
{
    if mouse_check_button(mb_left)
    {
        State = "NejiShooting";
        
    }
}
if State = "NejiShooting"
{
    if image_index = 1
    {
        a= instance_create(x-(sprite_xoffset-BulletXOffSet),y-(sprite_yoffset-BulletYOffSet),oNejiBullet);
        a.Speed = 20;
        a.PD = point_direction(x,y,mouse_x,mouse_y);
        
    }
}


view_wview = clamp(view_wview,1280-(1.77777777*60),1280);
view_hview = clamp(view_hview,720-(60),720);



/*if keyboard_check_pressed(ord("1"))
{
    CurrentGun = 1;
}
if keyboard_check_pressed(ord("2"))
{
    CurrentGun = 2;
}
if keyboard_check_pressed(ord("3"))
{
    CurrentGun = 3;
}
if keyboard_check_pressed(ord("4"))
{
    CurrentGun = 4;
}
if keyboard_check_pressed(ord("5"))
{
    CurrentGun = 12;
}
if keyboard_check_pressed(ord("6"))
{
    CurrentGun = 12;
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WTF angle

PD = abs(point_direction(phy_position_x,phy_position_y,mouse_x,mouse_y));

    if PD &gt;= 22.5 + 45 &amp;&amp; PD &lt; 22.5+45+90*1
    {
        LookDir = "Up"
        BulletXOffSet = 275;
        BulletYOffSet = 17;
        LookNum = 2;
    }
    else
    {
        if PD &gt;= 22.5 + 45+90*1 &amp;&amp; PD &lt; 22.5+45+90*2
        {
            LookDir = "Left"
            LookNum = 3;
            BulletXOffSet = 128;
            BulletYOffSet = 39;
        }
        else
        {
            if PD &gt;= 22.5 + 45+90*2 &amp;&amp; PD &lt; 22.5+45+90*3
            {
                LookDir = "Down"
                LookNum = 4;
                BulletXOffSet = 26;
                BulletYOffSet = 61;
            }
            else
            {
                LookDir = "Right"
                LookNum = 1;
                BulletXOffSet = 415;
                BulletYOffSet = 40;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if State = "Kicking"
{
    if combo = 3
    {
        room_speed = 30;
        if !instance_exists(oScreenShake)
        {
            a = instance_create(x,y,oScreenShake);
            a.shake = 1;
        }
    }
}
else
{
    room_speed = 30;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oRobot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place holder

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if SpellCasting = true
{
    SpellCasting = false;
    State = "Idle"
    image_speed = 0;
    Dir = LookDir;
}
if State = "Kicking" || (State = "NejiShooting" &amp;&amp; !mouse_check_button(mb_left))
{
    State = "Idle";
    image_index = 0;
    image_speed = 0;
    Dir = LookDir;
    view_wview = 1280;
    view_hview = 720;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rmGame2
{
    phy_position_x = 1333;
    phy_position_y = 90;
    oCamera.Character = "Rama"
    phy_fixed_rotation = true;
    
}
if room = rmGame
{
    phy_position_x = 4460;
    phy_position_y = 9999;
    oCamera.Character = "Riahura"
    phy_fixed_rotation = true;
}
phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_self();
draw_set_halign(fa_center);
draw_set_colour(c_aqua);
//draw_text(x,y+5,string(Element) + string("#") + string(CurrentSpell) + string("#") + string(ds_grid_get(Spells,Element,CurrentSpell))    );


if sprite_index != sRiahuraSpellCast1
{
    draw_sprite(sShadow,0,x,y);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>10</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,88</point>
    <point>8,30</point>
  </PhysicsShapePoints>
</object>
