<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100101</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///penis
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles
if room = rmGame
{
    Sname = part_system_create();
    part_system_depth(Sname,-10120312093);
    particle1 = part_type_create();
    part_type_shape(particle1,pt_shape_disk);
    part_type_size(particle1,2,2,0,0);
    part_type_scale(particle1,1,1);
    part_type_color3(particle1,16777215,8454016,8453888);
    part_type_alpha1(particle1,1);
    part_type_speed(particle1,1,1,0,0);
    part_type_direction(particle1,0,359,0,0);
    part_type_gravity(particle1,0,270);
    part_type_orientation(particle1,0,0,0,0,1);
    part_type_blend(particle1,1);
    part_type_life(particle1,60,60);
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,view_xview,view_xview+view_wview,view_yview,view_yview+view_hview,ps_shape_ellipse,1);
    part_emitter_burst(Sname,emitter1,particle1,1);
}
alarm[0] = 30*choose(.5,.75,1,1.25,1.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_escape)
{
    game_end();
}

///Brightness
/*if (keyboard_check(ord('T'))) {
  pos -= 0.01;
}

if (keyboard_check(ord('G'))) {
  pos += 0.01;
}*/

pos = clamp(pos, -.1, .1);

if alarm[11] = 0
{
    room_goto(rmGame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rmGameSetup
{
    room_goto(rmTitle);
}
if room = rmGame
{
    pos = -.02;
}

if room = rmWarning
{
    alarm[11] = 30*20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls and variables
alarm[0] = 1;

cursor_sprite = sCursor;

global.MoveUp = "W";
global.MoveDown = "A";
global.MoveUpController = "LSU";
global.MoveDownController = "LSD";

CanLoad = choose(0,1);

pos_uni = shader_get_uniform(sh_saturation, "Position"); // control shader

pos = 0;

//if file_exists(working_directory + "\bruh");
/*
if keyboard_check_pressed(ord("S"))
{
    if file_exists("Save.sav")
    {
        file_delete("Save.sav");
    }
    
    var SaveFile = file_text_open_write("Save.sav");
    var SavedRoom = room;
    var Savednum = global.num;
    file_text_write_real(SaveFile,SavedRoom);
    file_text_write_real(SaveFile,Savednum);
    file_text_close(SaveFile);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory

/*w = 10;
h = 10;

Inventory = ds_grid_create(w,h);
Quality = ds_grid_create(w,h);
Quantity = ds_grid_create(w,h);

for(i = 0; i &lt;= w; i ++)
{
    for(ii = 0; ii &lt;= h; ii ++)
    {
        ds_grid_set(Inventory,i,ii,0);
        ds_grid_set(Quality,i,ii,0);
        ds_grid_set(Quantity,i,ii,0);
    }
}


Items = ds_grid_create(100,100);
i = 0;
ds_grid_set(Items,i,1,"Mana Pot"); //Name
ds_grid_set(Items,i,2,"MP"); //Type
ds_grid_set(Items,i,3,30); //Health heals/energy regen if it's a potion

i ++;
ds_grid_set(Items,i,1,"Health Pot"); //Name
ds_grid_set(Items,i,2,"HP"); //Type
ds_grid_set(Items,i,3,60); //Health heals/energy regen if it's a potion

i ++;
ds_grid_set(Items,i,1,"Health Pot"); //Name
ds_grid_set(Items,i,2,"HP"); //Type
ds_grid_set(Items,i,3,60); //Health heals/energy regen if it's a potion

i ++;
ds_grid_set(Items,i,1,"Health Pot"); //Name
ds_grid_set(Items,i,2,"HP"); //Type
ds_grid_set(Items,i,3,60); //Health heals/energy regen if it's a potion







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_set(sh_saturation);
shader_set_uniform_f(pos_uni, pos);
//shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
