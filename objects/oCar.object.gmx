<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBike</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
image_speed = 0;
image_angle = -90;

psys = part_system_create();
part_system_automatic_draw(psys,false);
part_system_position(psys,0,0)

emm = part_emitter_create(psys);

tyre_part = part_type_create();
part_type_sprite(tyre_part,sTirePart,false,false,false);
part_type_life(tyre_part,120,180);
part_type_alpha2(tyre_part,0.1,0);

angle_dif = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Input

//Turning left
if (gamepad_axis_value(0,gp_axislh) &lt; -0.5)
{    
    phy_rotation += (2.7 * (gamepad_axis_value(0,gp_axislh) ))
}
if (keyboard_check(vk_left))
{    
    phy_rotation += (-2.7)
}

//Turning right
if (gamepad_axis_value(0,gp_axislh) &gt; 0.5)
{    
    phy_rotation -= (-2.7 * (gamepad_axis_value(0,gp_axislh) ))
}
if (keyboard_check(vk_right))
{    
    phy_rotation -= (-2.7)
}

//Applying gas
gas_value = gamepad_button_value(0,gp_shoulderrb);
gas_value2 = keyboard_check(vk_space);
//Controller
if (gas_value &gt; 0.1 )
{
    forward_x = lengthdir_x(155,-phy_rotation-90)*gas_value*5;
    forward_y = lengthdir_y(155,-phy_rotation-90)*gas_value*5;
    
    physics_apply_force(x,y,forward_x,forward_y);
}
//Keyboard
if (gas_value2 &gt; 0.1 )
{
    forward_x = lengthdir_x(155,-phy_rotation-90)*gas_value2*5;
    forward_y = lengthdir_y(155,-phy_rotation-90)*gas_value2*5;
    
    physics_apply_force(x,y,forward_x,forward_y);
}


///Particle Systems
if(phy_speed &gt;1)
{
    part_emitter_region(psys,emm,x-1,x+1,y-1,y+1,ps_shape_rectangle,ps_distr_gaussian);
    inertia_dir = point_direction(x,y,x+phy_speed_x,y+phy_speed_y);
    forward_dir = point_direction(x,y,x+lengthdir_x(50,-phy_rotation-90),y + lengthdir_y(50,-phy_rotation-90));
    
    angle_dif = abs(angle_difference(forward_dir,inertia_dir));
    
    if(angle_dif &gt; 20) //If Drifting
    {
        part_type_orientation(tyre_part,-phy_rotation,-phy_rotation,0,0,0);
        part_emitter_burst(psys,emm,tyre_part,5);
    }
    
}



event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oRama">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//physics_apply_force(x,y,forward_x/10,forward_y/10)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_drawit(psys);   
draw_self();
//draw_text(x-20,y-20,string(angle_dif));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>3</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.899999976158142</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,20</point>
    <point>80,20</point>
    <point>80,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
